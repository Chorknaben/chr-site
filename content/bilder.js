// Generated by CoffeeScript 1.7.1
var Bilder,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Bilder = (function(_super) {
  __extends(Bilder, _super);

  function Bilder() {
    this.adjustPos = __bind(this.adjustPos, this);
    Bilder.__super__.constructor.call(this);
  }

  Bilder.prototype.onGenerateMarkup = function() {
    return this.c.withAPICall("/images/num", function(retobj) {});
  };

  Bilder.prototype.onDOMVisible = function() {
    this.adjustPos();
    return $(window).bind({
      resize: this.adjustPos
    });
  };

  Bilder.prototype.adjustPos = function() {
    var delta, rightElem, rightPoint, width;
    width = $(window).width();
    rightElem = this.findRightMost();
    rightPoint = rightElem.offset().left + rightElem.width();
    delta = (width * 0.94 - rightPoint) / 2;
    return $(".image-container").css({
      "margin-left": (width * 0.06) + delta
    });
  };

  Bilder.prototype.findRightMost = function() {
    var firstOffset, leftIndex;
    firstOffset = $(".img-image").first().offset().top;
    leftIndex = -1;
    console.log("First offset:" + firstOffset);
    console.log($(".img-image"));
    $(".img-image").each((function(_this) {
      return function(index, obj) {
        var $obj;
        $obj = $(obj);
        if ($obj.offset().top !== firstOffset) {
          leftIndex = index - 1;
          return false;
        }
      };
    })(this));
    if (leftIndex !== -1) {
      return $(".img-image").eq(leftIndex);
    }
    return false;
  };

  Bilder.prototype.onUnloadChild = function() {
    return $(window).unbind("resize", this.adjustPos);
  };

  return Bilder;

})(ChildPage);

window.core.insertChildPage(new Bilder());

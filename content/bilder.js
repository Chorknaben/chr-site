// Generated by CoffeeScript 1.7.1
var Bilder,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Bilder = (function(_super) {
  __extends(Bilder, _super);

  function Bilder() {
    this.adjustPos = __bind(this.adjustPos, this);
    this.imageViewerClose = __bind(this.imageViewerClose, this);
    this.imageViewerOpen = __bind(this.imageViewerOpen, this);
    this.onLoad = __bind(this.onLoad, this);
    this.catCount = 0;
    this.currentScrollPos = -1;
    Bilder.__super__.constructor.call(this);
  }

  Bilder.prototype.argumentHandler = function() {};

  Bilder.prototype.onLoad = function() {
    return $.ajax({
      url: "test.json"
    }).done((function(_this) {
      return function(tree) {
        var c, imgptr, _i, _j, _len, _len1, _ref;
        console.log("onLoad: Generating Content!");
        for (_i = 0, _len = tree.length; _i < _len; _i++) {
          c = tree[_i];
          _this.genCat(c.category.title, c.category.caption, c.category.content);
          _ref = c.category.childs;
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            imgptr = _ref[_j];
            _this.genImg(imgptr[0], imgptr[1]);
          }
        }
        _this.c.release();
        return _this.initOnClick();
      };
    })(this));
  };

  Bilder.prototype.acquireLoadingLock = function() {
    return true;
  };

  Bilder.prototype.onDOMVisible = function() {
    this.adjustPos();
    return $(window).bind({
      resize: this.adjustPos
    });
  };

  Bilder.prototype.onUnloadChild = function() {
    return $(window).unbind("resize", this.adjustPos);
  };

  Bilder.prototype.initOnClick = function() {
    $(".img-image").each((function(_this) {
      return function(index, obj) {
        var $obj;
        $obj = $(obj);
        return $obj.click(function() {
          var image, imgFullPath;
          $obj.addClass("loading");
          imgFullPath = $obj.children("img").attr("src").replace("thumbs", "real");
          return image = $("<img>").attr("src", imgFullPath).load(function() {
            $obj.removeClass("loading");
            return _this.imageViewerOpen(image);
          });
        });
      };
    })(this));
    return $(".cross").click(this.imageViewerClose);
  };

  Bilder.prototype.imageViewerOpen = function(image) {
    var viewer;
    this.currentScrollPos = $(window).scrollTop();
    console.log("recording current scrolltop:");
    $(".scrolled").css({
      overflow: "hidden"
    });
    viewer = $(".image-viewer");
    $(image).prependTo($(".image-viewer"));
    viewer.removeClass("nodisplay");
    return $(".cross").removeClass("nodisplay");
  };

  Bilder.prototype.imageViewerClose = function() {
    console.log(this.currentScrollPos);
    $(".scrolled").css({
      overflow: "initial"
    });
    $(window).scrollTop(this.currentScrollPos);
    this.c.registerTaker("dontHandle", true);
    window.location.hash = "#!/bilder";
    $(".image-viewer").addClass("nodisplay");
    $(".image-viewer").children("img").remove();
    return $(".cross").addClass("nodisplay");
  };

  Bilder.prototype.adjustPos = function() {
    var delta, rightElem, rightPoint, width;
    width = $(window).width();
    rightElem = this.findRightMost();
    rightPoint = rightElem.offset().left + rightElem.width();
    delta = (width * 0.94 - rightPoint) / 2;
    return $(".image-container").css({
      "margin-left": (width * 0.06) + delta
    });
  };

  Bilder.prototype.findRightMost = function() {
    var firstOffset, leftIndex;
    firstOffset = $(".img-image").first().offset().top;
    leftIndex = -1;
    console.log("First offset:" + firstOffset);
    console.log($(".img-image"));
    $(".img-image").each((function(_this) {
      return function(index, obj) {
        var $obj;
        $obj = $(obj);
        if ($obj.offset().top !== firstOffset) {
          leftIndex = index - 1;
          return false;
        }
      };
    })(this));
    if (leftIndex !== -1) {
      return $(".img-image").eq(leftIndex);
    }
    return false;
  };

  Bilder.prototype.genCat = function(title, caption, content) {
    $(".image-container").append($("<a>").addClass("img-chapter").attr("href", "/#!/bilder/kategorie/" + this.catCount).append($("<h2>" + title + "</h2>").append($("<span>" + caption + "</span>"))));
    return this.catCount++;
  };

  Bilder.prototype.genImg = function(filePtr, caption) {
    return $(".image-container").append($("<a>").addClass("img-image").attr("href", "/#!/bilder/element/" + filePtr).append($("<img>").attr("src", "/images/thumbs/" + filePtr)).append($("<span>" + caption + "</span>")));
  };

  return Bilder;

})(ChildPage);

window.core.insertChildPage(new Bilder());

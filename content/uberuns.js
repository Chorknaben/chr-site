// Generated by CoffeeScript 1.7.1
var ExperienceHandler, ImageCarusel, expH,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ImageCarusel = (function() {
  function ImageCarusel() {}

  ImageCarusel.prototype.contructor = function(imagediv) {
    this.imagediv = imagediv;
    this.left = $(this.imagediv).find(".left");
    this.main = $(this.imagediv).find(".main");
    return this.right = $(this.imagediv).find(".right");
  };

  ImageCarusel.prototype.load = function() {
    var i, _i, _len, _ref, _results;
    _ref = [this.left, this.main, this.right];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      _results.push($(i).bind("load", function() {
        return this.fadeIn();
      }));
    }
    return _results;
  };

  ImageCarusel.prototype.click_left = function(event) {};

  ImageCarusel.prototype.click_middle = function(event) {};

  ImageCarusel.prototype.click_right = function(event) {};

  return ImageCarusel;

})();

ExperienceHandler = (function() {
  function ExperienceHandler() {
    this.fitConnectors = __bind(this.fitConnectors, this);
    var i, _i, _j, _ref, _ref1;
    this.waypoints = $(".waypoint");
    this.c = window.core;
    this.w = $(window);
    this.c.state["eingerastet"] = new Array(this.waypoints.length);
    for (i = _i = 0, _ref = this.waypoints.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      this.c.state["eingerastet"][i] = false;
    }
    this.topOnRast = -1;
    this.stack = 0;
    this.cssOrgTop = 0;
    this.lastScroll = 0;
    this.originalTops = [];
    for (i = _j = 0, _ref1 = this.waypoints.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
      this.originalTops.push(parseInt($(this.waypoints[i]).css("top")) + $(window).height() - 155);
    }
    console.log(this.originalTops);
  }

  ExperienceHandler.prototype.scroll = function() {
    var asdstack, distance, fstDelta, fstEdge, i, st, stackFst, stackFstB, stackFstC, stackHgt, stackSnd, stackSndI, _i, _j, _ref, _ref1, _ref2, _ref3;
    stackFst = $(this.waypoints[this.stack]);
    stackFstB = stackFst.children('.wbody');
    stackFstC = stackFst.children('.connector');
    fstEdge = stackFstB.offset().top + stackFstB.height();
    stackHgt = 279 + stackFstB.height();
    stackSnd = $(this.waypoints[this.stack + 1]);
    stackSndI = stackSnd.children('img');
    fstDelta = stackSndI.offset().top - fstEdge;
    st = this.w.scrollTop();
    if (st > this.lastScroll) {
      for (i = _i = 0, _ref = this.waypoints.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (i === 0) {
          if (this.w.scrollTop() < this.originalTops[0]) {
            $(this.waypoints[0]).css({
              position: "absolute"
            });
            break;
          }
        }
        if (i === this.waypoints.length - 1) {
          console.log("thats right");
          if (this.originalTops[i] < this.w.scrollTop()) {
            $(this.waypoints[i]).css({
              position: "fixed",
              top: "150px"
            });
            break;
          }
        }
        if ((this.originalTops[i - 1] < (_ref1 = this.w.scrollTop()) && _ref1 < this.originalTops[i])) {
          distance = $(this.waypoints[i]).children('img').offset().top - ($(this.waypoints[i - 1]).children('.wbody').offset().top + $(this.waypoints[i - 1]).children('.wbody').height());
          console.log(distance);
          asdstack = 279 + $(this.waypoints[i - 1]).children('.wbody').height();
          if (distance <= 0 && this.w.scrollTop() > this.originalTops[i - 1] + 100) {
            $(this.waypoints[i - 1]).children().each(function(i, obj) {
              obj = $(obj);
              if (!obj.hasClass("connector")) {
                if (obj.prop("tagName") !== "IMG") {
                  return obj.css({
                    opacity: 1 - Math.abs(distance) * (1 / asdstack)
                  });
                }
              }
            });
          }
          $(this.waypoints[i - 1]).css({
            position: "fixed",
            top: "150px"
          });
          $(this.waypoints[i]).css({
            position: "absolute"
          });
          break;
        }
      }
    } else {
      for (i = _j = 0, _ref2 = this.waypoints.length - 1; 0 <= _ref2 ? _j <= _ref2 : _j >= _ref2; i = 0 <= _ref2 ? ++_j : --_j) {
        if (i === 0) {
          if (this.w.scrollTop() < this.originalTops[0]) {
            $(this.waypoints[0]).css({
              position: "absolute"
            });
          }
        }
        if ((this.originalTops[i - 1] < (_ref3 = this.w.scrollTop()) && _ref3 < this.originalTops[i])) {
          distance = $(this.waypoints[i]).children('img').offset().top - ($(this.waypoints[i - 1]).children('.wbody').offset().top + $(this.waypoints[i - 1]).children('.wbody').height());
          console.log(distance);
          asdstack = 279 + $(this.waypoints[i - 1]).children('.wbody').height();
          if (distance <= 0 && this.w.scrollTop() > this.originalTops[i - 1] + 100) {
            $(this.waypoints[i - 1]).children().each(function(i, obj) {
              obj = $(obj);
              if (!obj.hasClass("connector")) {
                if (obj.prop("tagName") !== "IMG") {
                  return obj.css({
                    opacity: 1 - Math.abs(distance) * (1 / asdstack)
                  });
                }
              }
            });
          }
          $(this.waypoints[i]).css({
            position: "absolute",
            top: this.originalTops[i] - $(window).height() + 155
          });
        }
      }
    }
    return this.lastScroll = st;
  };

  ExperienceHandler.prototype.fitConnectors = function() {
    return this.waypoints.each((function(_this) {
      return function(index, obj) {
        var connect, nextImg;
        if (index === _this.waypoints.length - 1) {
          return;
        }
        obj = $(obj);
        connect = obj.children('.connector');
        nextImg = $(_this.waypoints[index + 1]).children('img');
        return connect.css({
          height: nextImg.offset().top - connect.offset().top + 8
        });
      };
    })(this));
  };

  return ExperienceHandler;

})();

expH = new ExperienceHandler();

$("body").on({
  mousewheel: function(event) {
    if (event.originalEvent.wheelDelta >= 0 && $(window).scrollTop() < window.core.state["scrolloff"]) {
      return $("#waypoint-0").css({
        position: "absolute"
      });
    }
  }
});

window.core.registerScrollHandler("waypointfixer", function() {
  expH.scroll();
  return expH.fitConnectors();
});

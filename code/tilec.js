// Generated by CoffeeScript 1.7.1
var Tile,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Tile = (function() {
  function Tile(_const) {
    this["const"] = _const;
    this.finalizeLoading = __bind(this.finalizeLoading, this);
    this.load = __bind(this.load, this);
    this.core = window.core;
    this.interval = null;
    this.scaleCount = 0;
    this.headerImg = $("#header-img");
    this.core.exportFunction("Tile.finalizeLoading", this.finalizeLoading);
    this.core.exportFunction("Tile.load", this.load);
  }

  Tile.prototype.load = function(urlWhat, callback, originalSite, urlOverride, bare) {
    if (originalSite == null) {
      originalSite = void 0;
    }
    if (urlOverride == null) {
      urlOverride = void 0;
    }
    if (bare == null) {
      bare = false;
    }
    if (!bare) {
      window.nav.by(this["const"].METHODS.NAME_USER, urlWhat);
    }
    this.core.state["globalHashResponseDisabled"] = true;
    return $("#result").load("content/" + urlWhat + ".html", (function(_this) {
      return function() {
        _this.setLoadingScreen(true);
        $(_this.core.state["blurredbg"]).appendTo("#blurbg");
        if (!originalSite) {
          $(".scrolled").attr("id", urlWhat);
        } else {
          $(".scrolled").attr("id", originalSite);
        }
        if (!urlOverride) {
          _this.core.state["currentURL"] = urlWhat;
        } else {
          _this.core.state["currentURL"] = urlOverride;
        }
        _this.core.state["tileid"] = _this.tileid;
        _this.core.registerTaker("pageChanged", true);
        return $.when($.getScript("content/" + urlWhat + ".js", $.Deferred(function(deferred) {
          return $(deferred.resolve);
        }))).done(function() {
          _this.core.state["childPage"].onLoad();
          if (_this.core.state["childPage"].acquireLoadingLock()) {
            _this.core.registerTaker("pendingCallback", callback);
            return;
          }
          return _this.finalizeLoading(callback);
        });
      };
    })(this));
  };

  Tile.prototype.finalizeLoading = function(callback) {
    var moreHash;
    if (callback == null) {
      callback = void 0;
    }
    moreHash = this.core.requestTaker("backupHash");
    if (typeof moreHash !== "undefined") {
      window.location.hash = moreHash;
    }
    this.setLoadingScreen(false);
    $("#result").css({
      display: "initial"
    });
    $(".tilecontainer").css({
      display: "none"
    });
    this.core.state["globalHashResponseDisabled"] = false;
    this.core.state["childPage"].onDOMVisible();
    if (callback) {
      return callback();
    }
  };

  Tile.prototype.setLoadingScreen = function(toggle) {
    if (toggle) {
      return $("#loading-screen").css({
        display: "block"
      });
    } else {
      return $("#loading-screen").css({
        display: "none"
      });
    }
  };

  return Tile;

})();

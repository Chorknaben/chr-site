// Generated by CoffeeScript 1.7.1
var ChildPage, Constants, ContentViewer, Core, ImageViewer, IndexPage, Navigation, Tile,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

Constants = (function() {
  function Constants() {}

  Constants.SELECTOR_TILE = ".tile-content";

  Constants.SELECTOR_NAV = ".navitem nav";

  Constants.METHODS = {
    "NAME": 0x00001,
    "NAME_USER": 0x00010,
    "ID": 0x00100
  };

  Constants.ApplicationRoutes = [["uberuns/reise", "uberuns-reise"], ["uberuns/team", "uberuns-team"], ["uberuns/timeline", "uberuns-timeline"], ["uberuns", "uberuns"], ["stiftung", "stiftung"], ["presse", "presse"], ["musik", "musik"], ["shop", "shop"], ["kalender", "kalender"], ["bilder", "bilder"], ["impressum", "impressum"], ["unterstutzen", "unterstutzen"]];

  return Constants;

})();

Core = (function() {
  var debug;

  function Core() {
    this.resolveLocator = __bind(this.resolveLocator, this);
    this.handleHash = __bind(this.handleHash, this);
  }

  Core.prototype.state = {
    scrolledDown: false,
    currentURL: "null",
    currentPage: "null"
  };

  debug = function(msg) {
    return console.log("Core: " + msg);
  };

  Core.prototype.initializeHashNavigation = function() {
    if (window.location.hash === "") {
      return window.location.hash = "#!/";
    }
  };

  Core.prototype.handleHash = function() {
    var hash, matching;
    if (this.state["globalHashResponseDisabled"]) {
      return;
    }
    hash = window.location.hash;
    this.ensureFooterDown();
    if (hash === "#!/") {
      this.raiseIndexPage();
      return;
    }
    if (hash === "#!/kalender") {
      this.raiseIndexPage();
      this.delegateChildPage("", "#!/kalender");
      return;
    }
    matching = this.resolveLocator(hash);
    switch (matching.msg) {
      case "match":
        matching.handler();
        break;
      case "nomatch":
        matching.handler();
    }
  };

  Core.prototype.resolveLocator = function(hash) {
    var element, route, usefulHash, _i, _len, _ref;
    route = null;
    usefulHash = hash.substr(3, hash.length);
    _ref = Constants.ApplicationRoutes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      element = _ref[_i];
      if (usefulHash.lastIndexOf(element[0], 0) === 0) {
        route = element[1];
        break;
      }
    }
    if (route) {
      return {
        msg: "match",
        handler: (function(_this) {
          return function() {
            if ($(".scrolled").attr("id") === route) {
              return _this.delegateChildPage(route, usefulHash);
            } else {
              if (!$(".content-viewer").hasClass("nodisplay")) {
                _this.requestFunction("ContentViewer.close", function(funcPtr) {
                  return funcPtr(-1, true);
                });
              }
              return _this.requestFunction("Tile.load", function(load) {
                return load(route, true, function() {
                  return _this.delegateChildPage(route, usefulHash);
                });
              });
            }
          };
        })(this)
      };
    } else {
      return {
        msg: "nomatch",
        handler: (function(_this) {
          return function() {
            return console.log("fixme: display 404");
          };
        })(this)
      };
    }
  };

  Core.prototype.delegateChildPage = function(route, hash) {
    var delegatePart;
    delegatePart = hash.substr(route.length, hash.length);
    return this.state["childPage"].notifyHashChange(delegatePart);
  };

  Core.prototype.raiseIndexPage = function() {
    if ((window.location.hash === "#!/" && this.requestTaker("pageChanged")) || (location.hash === "#!/kalender")) {
      debug("Back to Index page");
      $(".tilecontainer").css({
        display: "initial"
      });
      $(".scrolled").css({
        display: "none"
      });
      $(".scrolled").attr("id", "");
      $("#bg").css({
        opacity: 1
      });
      $(".tilecontainer").css({
        opacity: 1
      });
      if (window.ie) {
        $(".tilecontainer").css({
          display: "block"
        });
      }
      this.state["childPage"].onUnloadChild();
      this.state["childPage"] = new IndexPage();
      this.state["currentPage"] = void 0;
      this.state["currentURL"] = void 0;
      window.nav.reset();
      return this.requestFunction("ImgRotator.pauseImgRotator", function(func) {
        console.log("imgRotator: resume");
        return func(true);
      });
    } else {
      this.state["childPage"].closeCalendar();
      $(".tilecontainer").css({
        display: "block"
      });
      return debug("Already at Index Page");
    }
  };

  Core.prototype.ensureFooterDown = function() {
    return $("#footer").css({
      bottom: "0px"
    });
  };

  Core.prototype.ensureImageViewerClosed = function() {
    this.requestFunction("ImageViewer.forceClose", (function(_this) {
      return function(func) {
        return func(true);
      };
    })(this));
    return this.revokeFunction("ImageViewer.forceClose");
  };

  Core.prototype.executeOnce = function(name, func) {
    if (this.state["tmp" + name] === true) {

    } else {
      this.state["tmp" + name] = true;
      return func();
    }
  };

  Core.prototype.rearm = function(name) {
    return delete this.state["tmp" + name];
  };

  Core.prototype.registerTaker = function(name, obj) {
    return this.state["__taker" + name] = obj;
  };

  Core.prototype.requestTaker = function(name) {
    var s;
    s = this.state["__taker" + name];
    delete this.state["__taker" + name];
    return s;
  };

  Core.prototype.insertChildPage = function(pageObj) {
    if (this.state["childPage"]) {
      this.state["childPage"].onUnloadChild();
    }
    this.state["childPage"] = pageObj;
    this.requestFunction("ImgRotator.pauseImgRotator", function(func) {
      return func(false);
    });
    pageObj.onInsertion();
    if (window.currentLanguage === "de") {
      console.log("Applying language tpl: GERMAN");
      return this.setLanguage(window.translationObj.de);
    } else if (window.currentLanguage === "en") {
      console.log("Applying language tpl: ENGLISH");
      return this.setLanguage(window.translationObj.en);
    }
  };

  Core.prototype.exportFunction = function(name, func) {
    return this.state[name] = func;
  };

  Core.prototype.requestFunction = function(name, success, failure) {
    var func;
    if (failure == null) {
      failure = $.noop;
    }
    func = this.state[name];
    if (func) {
      return success(func);
    } else {
      return failure();
    }
  };

  Core.prototype.revokeFunction = function(name) {
    return delete this.state[name];
  };

  Core.prototype.release = function() {
    var callback;
    this.requestFunction("Tile.finalizeLoading", function(func) {
      return func();
    });
    callback = this.requestTaker("pendingCallback");
    if (callback) {
      return callback();
    }
  };

  Core.prototype.setLanguage = function(translationSubObj) {
    var translationCandidate, _i, _len, _results;
    console.log("fired");
    _results = [];
    for (_i = 0, _len = translationSubObj.length; _i < _len; _i++) {
      translationCandidate = translationSubObj[_i];
      _results.push((function(translationCandidate) {
        var trc;
        trc = $(translationCandidate.el);
        if (trc.length) {
          return trc.html(translationCandidate.content);
        }
      })(translationCandidate));
    }
    return _results;
  };

  Core.prototype.initializeTranslationEngine = function() {
    return $.getJSON("/data/json/translation_deploy.json", (function(_this) {
      return function(data) {
        window.translationObj = data;
        _this.attemptAutoSetLanguage();
        $("#de").click(function() {
          window.currentLanguage = "de";
          return _this.setLanguage(window.translationObj.de);
        });
        return $("#en").click(function() {
          window.currentLanguage = "en";
          return _this.setLanguage(window.translationObj.en);
        });
      };
    })(this));
  };

  Core.prototype.attemptAutoSetLanguage = function() {
    var lang;
    if (navigator.languages) {
      lang = navigator.languages[0];
    } else {
      lang = navigator.language || navigator.userLanguage;
    }
    if (lang.indexOf("de") === -1) {
      console.log("Stub: Browser does not seem to accept de: Setting en");
      window.currentLanguage = "en";
      return this.setLanguage(window.translationObj.en);
    }
  };

  Core.prototype.updateTranslations = function() {
    if (window.currentLanguage === "de") {
      return this.setLanguage(window.translationObj.de);
    } else if (window.currentLanguage === "en") {
      return this.setLanguage(window.translationObj.en);
    }
  };

  return Core;

})();

ChildPage = (function() {
  var notImplemented;

  function ChildPage() {
    this.c = window.core;
  }

  notImplemented = function(name) {
    return console.log("" + name + ": not implemented");
  };

  ChildPage.prototype.onDOMVisible = function() {
    return notImplemented("onDOMVisible");
  };

  ChildPage.prototype.onLoad = function() {
    return notImplemented("onLoad");
  };

  ChildPage.prototype.onScrollFinished = function() {
    return notImplemented("onScrollFinished");
  };

  ChildPage.prototype.onSoftReload = function() {
    return notImplemented("onSoftReload");
  };

  ChildPage.prototype.onScrollUpwards = function() {
    return notImplemented("onScrollUpwards");
  };

  ChildPage.prototype.onUnloadChild = function() {
    return notImplemented("onUnloadChild");
  };

  ChildPage.prototype.onInsertion = function() {
    return notImplemented("onInsertion");
  };

  ChildPage.prototype.acquireLoadingLock = function() {
    return false;
  };

  ChildPage.prototype.notifyHashChange = function(newHash) {};

  return ChildPage;

})();

IndexPage = (function(_super) {
  __extends(IndexPage, _super);

  function IndexPage() {
    this.notifyHashChange = __bind(this.notifyHashChange, this);
    this.leaveNavDropDown = __bind(this.leaveNavDropDown, this);
    this.pauseImgRotator = __bind(this.pauseImgRotator, this);
    this.onInsertion = __bind(this.onInsertion, this);
    var w;
    IndexPage.__super__.constructor.call(this);
    w = $(window).width();
    if (w > 1177) {
      this.bgSrc = "/" + ($(window).width()) + "/" + ($(window).height() - 90) + "/";
    } else {
      this.bgSrc = "/1610/" + ($(window).height() - 90) + "/";
    }
    this.currentRotatorImgID = 0;
    this.currentNewsID = 0;
    this.maxRotatorImgID = 100;
    this.imgObj = null;
    this.imgRotatorEnabled = true;
    this.navDropDown = false;
    this.ev = [];
    this.contentViewer = this.c.requestFunction("ContentViewer.requestInstance", (function(_this) {
      return function(cView) {
        return _this.contentViewer = cView();
      };
    })(this));
    $.getJSON("/data/json/events.json", (function(_this) {
      return function(events) {
        var ev, _i, _len, _ref;
        _ref = events.events;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          ev = _ref[_i];
          ev.date = moment(ev.date, "DD.MM.YYYY").format("YYYY-MM-DD");
        }
        window.ev = events.events;
        if (_this.clndr) {
          return _this.clndr.setEvents(events.events);
        }
      };
    })(this));
  }

  IndexPage.prototype.onInsertion = function() {
    this.injectBackground();
    this.injectTileBackgrounds();
    if (!window.mobile) {
      this.preloadImage();
    }
    this.footerLeftClick();
    this.initNavDropDown();
    this.initNewsRotator();
    this.imgRotator(10000);
    this.initFeedback();
    return this.c.exportFunction("ImgRotator.pauseImgRotator", this.pauseImgRotator);
  };

  IndexPage.prototype.injectBackground = function() {
    console.log("injectBackground");
    return $("<img>", {
      src: this.bgSrc + "bg"
    }).load(function() {
      $(this).appendTo("#bg");
      $("#bg").css({
        opacity: "1",
        background: "initial"
      });
      if (window.mobile) {
        $("#bg").css({
          background: "#1a171a"
        });
      }
      if (window.ie) {
        return $("#bg")[0].style.filter = "alpha(opacity=100)";
      }
    });
  };

  IndexPage.prototype.preloadImage = function() {
    var h, img, src, w;
    img = new Image();
    w = $(window).width();
    h = $(window).height();
    src = "" + w + "/" + h + "/bg/blurred";
    img.src = src;
    return this.c.state["blurredbg"] = img;
  };

  IndexPage.prototype.footerLeftClick = function() {
    $(".footer-left a").click((function(_this) {
      return function(event) {
        event.preventDefault();
        event.stopPropagation();
        return _this.toggleInfo();
      };
    })(this));
    $("#btnimpressum").click((function(_this) {
      return function(event) {
        event.preventDefault();
        event.stopPropagation();
        return _this.toggleImpressum();
      };
    })(this));
    return $("#startst").click((function(_this) {
      return function() {
        return $("#footer").css({
          bottom: "0px"
        });
      };
    })(this));
  };

  IndexPage.prototype.toggleInfo = function() {
    var bot;
    bot = $("#footer").css("bottom");
    if (bot !== "300px" && bot !== "0px") {
      this.toggleImpressum();
      setTimeout((function(_this) {
        return function() {
          return _this.toggleInfo();
        };
      })(this), 310);
    }
    if ($("#footer").css("bottom") === "0px") {
      $("#feedback").addClass("nodisplay");
      $("#infoarea").removeClass("nodisplay");
      return $("#footer").css({
        bottom: "300px"
      });
    } else {
      return $("#footer").css({
        bottom: "0px"
      });
    }
  };

  IndexPage.prototype.toggleImpressum = function() {
    var to;
    if ($("#footer").css("bottom") === "300px") {
      this.toggleInfo();
      setTimeout((function(_this) {
        return function() {
          return _this.toggleImpressum();
        };
      })(this), 320);
    }
    to = $(window).height() - 50 - 25;
    if ($("#footer").css("bottom") === "0px") {
      $("#feedback").removeClass("nodisplay");
      $("#feedback").css({
        height: to + 1
      });
      $("#infoarea").addClass("nodisplay");
      return $("#footer").css({
        bottom: to
      });
    } else {
      return $("#footer").css({
        bottom: "0px"
      });
    }
  };

  IndexPage.prototype.imgRotator = function(waitFor) {
    if (this.currentRotatorImgID === 0) {
      console.log("imgRotator: init");
      this.makeImage(function() {
        return $("#link-bilder").append(this.imgObj);
      });
      return this.imgRotator(15000);
    } else {
      return setTimeout((function(_this) {
        return function() {
          $("#link-bilder img").addClass("luminanz");
          return setTimeout(function() {
            $("#link-bilder img").remove();
            if (_this.currentRotatorImgID > _this.maxRotatorImgID) {
              _this.currentRotatorImgID = 1;
            }
            return _this.makeImage(function(image) {
              $("#link-bilder").append(image);
              return _this.imgRotator(15000);
            }, false);
          }, 2000);
        };
      })(this), waitFor);
    }
  };

  IndexPage.prototype.initNewsRotator = function() {
    $.getJSON("/data/json/newsticker.json", (function(_this) {
      return function(data) {
        var d, _i, _len, _ref, _results;
        _ref = data.news;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          d = _ref[_i];
          if (window.ie) {
            _this.news = data.news;
          }
          _results.push($("#newsticker").append($("<li>").html(d)));
        }
        return _results;
      };
    })(this));
    if (!window.ie) {
      return $("#newsticker").newsTicker({
        row_height: 40,
        max_rows: 1,
        pauseOnHover: 1,
        duration: 8000,
        speed: 600,
        prevButton: $(".up"),
        nextButton: $(".down")
      });
    }
  };

  IndexPage.prototype.newsRotator = function(waitFor) {
    if (this.currentNewsID === 0) {
      console.log("newsRotator: init");
      $(".right").children("p").html("+++ " + this.news[0] + " +++");
      $(".right").children("p").css({
        opacity: 1
      });
      if (window.ie) {
        $(".right").children("p")[0].style.filter = "alpha(opacity=100)";
      }
      this.currentNewsID++;
      return this.newsRotator(waitFor);
    } else {
      return setTimeout((function(_this) {
        return function() {
          $(".right").children("p").css({
            opacity: 0
          });
          if (window.ie) {
            $(".right").children("p")[0].style.filter = "alpha(opacity=0)";
          }
          return setTimeout(function() {
            $(".right").children("p").html("+++ " + _this.news[_this.currentNewsID] + " +++");
            $(".right").children("p").css({
              opacity: 1
            });
            if (window.ie) {
              $(".right").children("p")[0].style.filter = "alpha(opacity=100)";
            }
            if (_this.currentNewsID >= _this.news.length) {
              _this.currentNewsID = 0;
            } else {
              _this.currentNewsID++;
            }
            return _this.newsRotator(waitFor);
          }, 1000);
        };
      })(this), waitFor);
    }
  };

  IndexPage.prototype.pauseImgRotator = function(state) {
    return this.imgRotatorEnabled = state;
  };

  IndexPage.prototype.makeImage = function(onload, lum) {
    this.imgObj = new Image();
    this.imgObj.onload = (function(_this) {
      return function() {
        return onload(_this.imgObj);
      };
    })(this);
    this.imgObj.src = "/images/real/" + this.currentRotatorImgID;
    if (lum) {
      this.imgObj.classList.add("luminanz");
    }
    if (this.imgRotatorEnabled) {
      return this.currentRotatorImgID++;
    }
  };

  IndexPage.prototype.injectTileBackgrounds = function() {
    var i, _i, _results;
    _results = [];
    for (i = _i = 12; _i >= 0; i = --_i) {
      _results.push($("#" + i).css({
        "background-image": "url(" + (this.bgSrc + i + "/tile") + ")"
      }));
    }
    return _results;
  };

  IndexPage.prototype.initNavDropDown = function() {
    var nav;
    nav = $(".header-nav-dropdown");
    return $(".header-nav-dropdown-icon").click((function(_this) {
      return function() {
        if (!_this.navDropDown) {
          console.log("enter");
          nav.css({
            top: "50px"
          });
          _this.navDropDown = true;
          _this.ignoreFirstShot = true;
          return $(document).on("click.nav", _this.leaveNavDropDown);
        } else {
          console.log("leave");
          return _this.leaveNavDropDown();
        }
      };
    })(this));
  };

  IndexPage.prototype.leaveNavDropDown = function() {
    if (this.ignoreFirstShot) {
      this.ignoreFirstShot = false;
      return;
    }
    console.log("leave");
    $(".header-nav-dropdown").css({
      top: "-200px"
    });
    this.navDropDown = false;
    return $(document).off("click.nav");
  };

  IndexPage.prototype.notifyHashChange = function(newHash) {
    var minHgt, pos;
    console.log(newHash);
    if (newHash === "#!/kalender") {
      pos = $("#6").offset();
      minHgt = false;
      this.template = _.template($("#calendar-template").html());
      this.contentViewer.open({
        left: function() {
          if (window.mobile) {
            return 0;
          }
          if (minHgt) {
            return $(window).width() * 0.06;
          } else {
            return 50;
          }
        },
        top: function() {
          if (minHgt) {
            return $(".smalltiles").children().first().offset().top;
          } else {
            return 50 + 25;
          }
        },
        right: function() {
          if (window.mobile) {
            return 0;
          }
          if (minHgt) {
            return $(window).width() * 0.06;
          } else {
            return 50;
          }
        },
        height: function() {
          if (window.mobile) {
            return $(window).height() - 75;
          }
          if (minHgt) {
            return $(".bigtile-content").height() + 10 + 40;
          } else {
            return $(window).height() - 50 - 25 - 50;
          }
        },
        chapter: false,
        title: "Kalender",
        caption: "Konzerte, Gottesdienste, Grillparties",
        revertHash: "#!/",
        content: "<div id=\"calendar-full\"></div>",
        animate: true,
        onClose: (function(_this) {
          return function() {
            return _this.contentViewerOpen = false;
          };
        })(this),
        startingPos: {
          left: pos.left,
          top: pos.top,
          width: $("#6").width(),
          height: $("#6").height()
        }
      });
      this.contentViewerOpen = true;
      this.clndr = $("#calendar-full").clndr({
        daysOfTheWeek: ['So', 'Mo', 'Di', "Mi", "Do", "Fr", "Sa"],
        events: window.ev,
        render: (function(_this) {
          return function(data) {
            return _this.template(data);
          };
        })(this),
        doneRendering: function() {
          return $(".event").hover(function() {
            var day;
            day = $(this).children(".day-number").html();
            if (day.length !== 2) {
              day = "0" + day;
            }
            console.log(day);
            return $(".event-item." + day).css({
              "background-color": "#0D0C0D"
            });
          }, function() {
            var day;
            day = $(this).children(".day-number").html();
            if (day.length !== 2) {
              day = "0" + day;
            }
            console.log(day);
            return $(".event-item." + day).css({
              "background-color": "#1a171a"
            });
          });
        }
      });
      return this.clndr.setEvents(window.ev);
    }
  };

  IndexPage.prototype.closeCalendar = function() {
    if (this.contentViewerOpen) {
      return this.contentViewer.close("#!/");
    }
  };

  IndexPage.prototype.needBeComplete = function() {
    var i, text, _i, _len;
    text = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = text.length; _i < _len; _i++) {
      i = text[_i];
      if (i === "") {
        $(".submit").css({
          "background-color": "red"
        });
        $(".submit").val("Alle Felder ausfüllen.");
        return false;
      }
    }
    return true;
  };

  IndexPage.prototype.validateEmail = function(email) {
    var re;
    re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    if (!re.test(email)) {
      $(".submit").css({
        "background-color": "red"
      });
      $(".submit").val("Korrekte E-Mail angeben.");
      return false;
    }
    return true;
  };

  IndexPage.prototype.initFeedback = function() {
    return $(".submit").click((function(_this) {
      return function(ev) {
        var feedbacktype, mail, name, text;
        ev.stopPropagation();
        ev.preventDefault();
        name = $(".feedbackform .name").val();
        mail = $(".feedbackform .email").val();
        feedbacktype = $('.feedbackform .option').find(":selected").attr("value");
        text = $(".feedbackform textarea").val();
        if (!_this.needBeComplete(name, mail, text)) {
          return;
        }
        if (!_this.validateEmail(mail)) {
          return;
        }
        return $.post("/feedback", {
          email: mail,
          name: name,
          feedbacktype: feedbacktype,
          text: text
        }, function(data) {
          console.log(data);
          if (data.indexOf("OK") === 0) {
            $("input").val("");
            $("textarea").val("");
            $(".feedbackform .submit").css({
              "background-color": "green"
            });
            return $(".feedbackform .submit").attr("value", "OK. Danke!");
          }
        });
      };
    })(this));
  };

  return IndexPage;

})(ChildPage);

Navigation = (function() {
  Navigation.preState = null;

  function Navigation(element) {
    this.navigator = $(element);
    this.navigationChilds = this.navigator.children();
  }

  Navigation.prototype.by = function(method, name) {
    var element, h, result, _i, _len, _ref;
    if (method === Constants.METHODS.NAME) {
      result = null;
      this.navigationChilds.each(function(i, obj) {
        var href;
        href = obj.attributes["href"].value;
        if (href.substring(3, href.length) === name) {
          result = $(obj);
          return false;
        }
      });
      if (result === null) {
        throw new Error("No such name under method");
      }
      return this.internalToggle(result);
    } else if (method === Constants.METHODS.ID) {
      if ((0 > name && name > this.navigationChilds.length)) {
        throw new Error("No object with this ID");
      }
      result = $(this.navigationChilds[name]);
      return this.internalToggle(result);
    } else if (method === Constants.METHODS.NAME_USER) {
      result = null;
      _ref = this.navigationChilds;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        element = _ref[_i];
        h = $(element).attr("href");
        if (name.lastIndexOf(h.substr(3, h.length), 0) === 0) {
          result = $(element);
          break;
        }
      }
      if (result === null) {
        result = this.inDropdown(name);
      }
      if (result === null) {
        throw new Error("No object with such a internal name");
      }
      return this.internalToggle(result);
    }
  };

  Navigation.prototype.inDropdown = function(name) {
    var el, element, nav, result, _i, _len;
    nav = $(".header-nav-dropdown").children();
    result = null;
    for (_i = 0, _len = nav.length; _i < _len; _i++) {
      element = nav[_i];
      el = $(element).children("a").attr("href");
      if (name.lastIndexOf(el.substr(3, el.length), 0) === 0) {
        result = $(element);
        break;
      }
    }
    return result;
  };

  Navigation.prototype.reset = function() {
    if (this.preState !== void 0) {
      return this.preState.css({
        "font-weight": "normal"
      });
    }
  };

  Navigation.prototype.internalToggle = function(toggleThis) {
    console.log(this.preState);
    if (this.preState !== void 0) {
      this.preState.css({
        "font-weight": "normal"
      });
    }
    toggleThis.css({
      "font-weight": "bold"
    });
    return this.preState = toggleThis;
  };

  return Navigation;

})();

ContentViewer = (function() {
  function ContentViewer() {
    this.clickOnViewerHandler = __bind(this.clickOnViewerHandler, this);
    this.closeClickHandler = __bind(this.closeClickHandler, this);
    this.close = __bind(this.close, this);
    this.update = __bind(this.update, this);
    this.open = __bind(this.open, this);
    this.core = window.core;
    this.contentObj = null;
    this.OPEN = false;
    this.core.exportFunction("ContentViewer.close", this.close);
  }

  ContentViewer.prototype.open = function(contentObj) {
    var $cnt, pos;
    this.ensureNoDuplicates();
    this.OPEN = true;
    $cnt = $(".content-viewer");
    console.log("contentViewer: open");
    this.contentObj = contentObj;
    $cnt.attr("style", "");
    if (!this.contentObj.height) {
      this.contentObj.height = function() {
        return "initial";
      };
    }
    if (this.contentObj.scrollTo) {
      $.scrollTo(this.contentObj.scrollTo.offset().top - this.contentObj.top(), 500);
    }
    if (this.contentObj.bgColor) {
      $cnt.css({
        "background": this.contentObj.bgColor
      });
    }
    $cnt.removeClass("nodisplay");
    if (this.contentObj.animate) {
      pos = this.contentObj.startingPos;
      $cnt.css({
        left: pos.left,
        top: pos.top,
        width: pos.width,
        height: pos.height,
        "z-index": 6
      });
      $cnt.css({
        opacity: 1,
        width: !this.contentObj.width ? $(window).width() - this.contentObj.right() - this.contentObj.left() : this.contentObj.width(),
        left: this.contentObj.left(),
        height: this.contentObj.height(),
        top: this.contentObj.top()
      });
      $(".content-viewer-padding").css({
        opacity: 1
      });
      return this["continue"]($cnt);
    } else {
      $(".content-viewer-padding").css({
        opacity: 1
      });
      $cnt.css({
        opacity: 1
      });
      return this["continue"]($cnt);
    }
  };

  ContentViewer.prototype["continue"] = function($cnt) {
    var $content;
    $("html").css({
      cursor: "pointer"
    });
    $("html .content-viewer").css({
      cursor: "initial"
    });
    this.update();
    $content = $cnt.children("div");
    if (this.contentObj.title || this.contentObj.caption || this.contentObj.content) {
      $content.children("h1").html(this.contentObj.title);
      $content.children("h2").html(this.contentObj.caption);
      $content.children("#ccnt").html(this.contentObj.content);
    }
    window.core.updateTranslations();
    $("#content-viewer-exit-button").removeClass("nodisplay");
    $("#content-viewer-exit-button").on("click", (function(_this) {
      return function() {
        return _this.close(_this.contentObj.revertHash);
      };
    })(this));
    $(document).bind("click.content", this.closeClickHandler);
    $(".content-viewer").bind("click.content", this.clickOnViewerHandler);
    return $(window).on("resize", this.update);
  };

  ContentViewer.prototype.update = function() {
    return $(".content-viewer").css({
      left: this.contentObj.left(),
      top: this.contentObj.top(),
      width: !this.contentObj.width ? $(window).width() - this.contentObj.right() - this.contentObj.left() : this.contentObj.width(),
      height: this.contentObj.height()
    });
  };

  ContentViewer.prototype.close = function(revertHash, noAnimationOverride) {
    var $cnt;
    if (noAnimationOverride == null) {
      noAnimationOverride = false;
    }
    $cnt = $(".content-viewer");
    console.log("contentViewer: close");
    $("#content-viewer-exit-button").addClass("nodisplay");
    $(document).unbind("click");
    $(".content-viewer").unbind("click");
    $("#content-viewer-exit-button").off("click");
    $("html").css({
      cursor: "default"
    });
    $cnt.css({
      cursor: "default"
    });
    if (revertHash !== -1) {
      this.core.registerTaker("dontHandle", true);
      window.location.hash = revertHash;
    }
    if (this.contentObj.animate && !noAnimationOverride) {
      $cnt.css({
        left: this.contentObj.startingPos.left,
        width: this.contentObj.startingPos.width,
        top: this.contentObj.startingPos.top,
        height: this.contentObj.startingPos.height
      });
      $cnt.children("div").addClass("nodisplay");
      setTimeout((function(_this) {
        return function() {
          $cnt.css({
            opacity: 0
          });
          return setTimeout(function() {
            $cnt.addClass("nodisplay");
            $cnt.children("div").removeClass("nodisplay");
            $(".content-viewer-padding").css({
              opacity: 0
            });
            window.location.hash = revertHash;
            _this.reset();
            return _this.OPEN = false;
          }, 400);
        };
      })(this), 600);
    } else {
      $cnt.addClass("nodisplay");
    }
    $(window).off("resize", this.update);
    this.clear();
    if (this.contentObj.onClose) {
      return this.contentObj.onClose();
    }
  };

  ContentViewer.prototype.clear = function() {
    $(".content-viewer-padding h1").empty();
    $(".content-viewer-padding h2").empty();
    return $("#ccnt").empty();
  };

  ContentViewer.prototype.reset = function() {
    this.clear();
    return $(".content-viewer").attr("style", "");
  };

  ContentViewer.prototype.ensureNoDuplicates = function() {
    if (!$(".content-viewer").hasClass("nodisplay") || this.OPEN) {
      console.log("Contentviewer: Duplicate Instance detected. Closing.");
      this.contentObj.animate = false;
      return this.close(-1);
    }
  };

  ContentViewer.prototype.closeClickHandler = function() {
    return this.close(this.contentObj.revertHash);
  };

  ContentViewer.prototype.clickOnViewerHandler = function(event) {
    return event.stopPropagation();
  };

  return ContentViewer;

})();

ImageViewer = (function() {
  ImageViewer.prototype.CLOSED = 0x00;

  ImageViewer.prototype.OPEN = 0x01;

  function ImageViewer() {
    this.fadeOutInfo = __bind(this.fadeOutInfo, this);
    this.close = __bind(this.close, this);
    this.open = __bind(this.open, this);
    this.state = this.CLOSED;
    window.core.exportFunction("ContentViewer.forceClose", this.close);
  }

  ImageViewer.prototype.open = function(conf) {
    var image, img, viewer;
    this.conf = conf;
    this.resetViewer();
    if (this.conf.navigation) {
      this.currentEl = this.conf.getCurrentElement();
      if (this.currentEl !== this.conf.minImage) {
        $(".arrleft").attr("href", this.conf.toLeftHash(this.currentEl));
        if (this.conf.nextChapterScreen) {
          if (this.conf.positionInChapter === "1") {
            $(".arrleft").attr("href", "#!/bilder/kategorie/" + this.conf.chapterID);
          }
        }
      } else {
        $(".arrleft").attr("href", this.conf.toLeftHash(this.currentEl + 1));
      }
      if (this.currentEl !== this.conf.maxImage) {
        $(".arrright").attr("href", this.conf.toRightHash(this.currentEl));
        if (this.conf.nextChapterScreen) {
          if (this.conf.positionInChapter === this.conf.chapterTotalLength) {
            $(".arrright").attr("href", "#!/bilder/kategorie/" + (this.conf.chapterID + 1));
          }
        }
      } else {
        $(".arrright").attr("href", this.conf.toRightHash(this.currentEl - 1));
      }
    }
    if (this.conf.lockScrolling) {
      this.currentScrollPos = $(window).scrollTop();
      $(".scrolled").css({
        overflow: "hidden"
      });
    }
    viewer = $(".image-viewer");
    if (this.conf.title) {
      $("#image-title").html(this.conf.title);
    }
    if (this.conf.positionInChapter && this.conf.chapterTotalLength) {
      $("#chapter-progress").html("(Bild " + this.conf.positionInChapter + " von " + this.conf.chapterTotalLength + ")");
    }
    if (this.conf.chapterName) {
      $("#chapter-name-main").html(this.conf.chapterName[0]);
      $("#chapter-name-caption").html(this.conf.chapterName[1]);
    }
    if (this.conf.descriptionSetting) {
      switch (this.conf.descriptionSetting) {
        case 1:
          $(".bar").addClass("nodisplay");
      }
    }
    if (this.conf.handleImageLoading) {
      img = new Image();
      $(img).prependTo($(".image-viewer"));
      viewer.children("img").addClass("link-cursor");
      img.src = this.conf.imagesource;
    } else {
      image = this.conf.image;
      $(image).addClass("link-cursor");
      $(image).prependTo($(".image-viewer"));
    }
    if (this.conf.enableDragging) {
      console.log("imageViewer.enableDragging: stub");
    }
    $(".image-viewer img").first().click((function(_this) {
      return function() {
        return _this.close();
      };
    })(this));
    $("#image-viewer-exit-button").removeClass("nodisplay");
    $("#image-viewer-exit-button").on("click", (function(_this) {
      return function() {
        return _this.close();
      };
    })(this));
    viewer.removeClass("nodisplay");
    $(".cross").removeClass("nodisplay");
    if ($(".image-viewer img").first().height() > $(window).height() - 300) {
      this.fadeOutInfo();
      $(".image-viewer img").first().on("mousemove", this.fadeOutInfo);
    }
    return this.state = this.OPEN;
  };

  ImageViewer.prototype.close = function(forceNoHash) {
    if (forceNoHash == null) {
      forceNoHash = false;
    }
    if (this.conf.lockScrolling) {
      $(".scrolled").css({
        overflow: "initial"
      });
      $(window).scrollTop(this.currentScrollPos);
    }
    if (this.conf.revertHash && !forceNoHash) {
      window.core.registerTaker("dontHandle", true);
      window.location.hash = this.conf.revertHash;
    }
    if (this.conf.arrowKeys) {
      $(window).off("keydown", this.imageViewerKeyPress);
    }
    $(".image-viewer img").first().off("mousemove", this.fadeOutInfo);
    clearTimeout(this.timeout);
    $(".bar").removeClass("fade");
    $(".image-viewer").addClass("nodisplay");
    $("#image-viewer-exit-button").addClass("nodisplay");
    $(".image-viewer img").first().remove();
    return this.state = this.CLOSED;
  };

  ImageViewer.prototype.resetViewer = function() {
    if (!$(".image-viewer").hasClass("nodisplay")) {
      $(".image-viewer img").first().remove();
    }
    $(".image-viewer .chapter-info-inline").remove();
    $(".bar").removeClass("fade");
    $(".bar").removeClass("nodisplay");
    return $('.image-viewer img').first().remove();
  };

  ImageViewer.prototype.getState = function() {
    return this.state;
  };

  ImageViewer.prototype.fadeOutInfo = function() {
    clearTimeout(this.timeout);
    $(".bar").removeClass("fade");
    $("body").css;
    return this.timeout = setTimeout((function(_this) {
      return function() {
        return $(".bar").addClass("fade");
      };
    })(this), 3500);
  };

  return ImageViewer;

})();

Tile = (function() {
  function Tile(_const) {
    this["const"] = _const;
    this.finalizeLoading = __bind(this.finalizeLoading, this);
    this.load = __bind(this.load, this);
    this.core = window.core;
    this.interval = null;
    this.scaleCount = 0;
    this.headerImg = $("#header-img");
    this.core.exportFunction("Tile.finalizeLoading", this.finalizeLoading);
    this.core.exportFunction("Tile.load", this.load);
  }

  Tile.prototype.load = function(urlWhat, animate, callback, originalSite, urlOverride, bare) {
    if (animate == null) {
      animate = false;
    }
    if (originalSite == null) {
      originalSite = void 0;
    }
    if (urlOverride == null) {
      urlOverride = void 0;
    }
    if (bare == null) {
      bare = false;
    }
    if (!bare) {
      window.nav.by(this["const"].METHODS.NAME_USER, urlWhat);
    }
    this.core.state["globalHashResponseDisabled"] = true;
    return $("#result").load("content/" + urlWhat + ".html", (function(_this) {
      return function() {
        if (animate) {
          _this.setLoadingScreen(true);
        }
        if (!window.mobile) {
          $(_this.core.state["blurredbg"]).appendTo("#blurbg");
        }
        if (!originalSite) {
          $(".scrolled").attr("id", urlWhat);
        } else {
          $(".scrolled").attr("id", originalSite);
        }
        if (!urlOverride) {
          _this.core.state["currentURL"] = urlWhat;
        } else {
          _this.core.state["currentURL"] = urlOverride;
        }
        _this.core.state["tileid"] = _this.tileid;
        _this.core.registerTaker("pageChanged", true);
        return $.when($.getScript("content/" + urlWhat + ".js", $.Deferred(function(deferred) {
          return $(deferred.resolve);
        }))).done(function() {
          _this.core.state["childPage"].onLoad();
          if (_this.core.state["childPage"].acquireLoadingLock()) {
            console.log("here");
            console.log(_this.core.state["childPage"]);
            _this.core.registerTaker("pendingCallback", callback);
            return;
          }
          return _this.finalizeLoading(callback, animate);
        });
      };
    })(this));
  };

  Tile.prototype.finalizeLoading = function(callback, animate) {
    var moreHash;
    if (callback == null) {
      callback = void 0;
    }
    if (animate == null) {
      animate = true;
    }
    moreHash = this.core.requestTaker("backupHash");
    if (typeof moreHash !== "undefined") {
      window.location.hash = moreHash;
    }
    if (animate) {
      this.setLoadingScreen(false);
    } else {
      $(".tilecontainer").css({
        display: "none"
      });
      this.core.state["childPage"].onDOMVisible();
    }
    $("#result").css({
      display: "block"
    });
    this.core.state["globalHashResponseDisabled"] = false;
    if (callback) {
      return callback();
    }
  };

  Tile.prototype.setLoadingScreen = function(toggle) {
    if (toggle) {
      $("#bg").css({
        opacity: 0
      });
      $(".tilecontainer").css({
        display: "none"
      });
      return setTimeout((function(_this) {
        return function() {
          return _this.animationEnded = true;
        };
      })(this), 400);
    } else {
      if (!this.animationEnded) {
        setTimeout((function(_this) {
          return function() {
            return _this.setLoadingScreen(false);
          };
        })(this), 50);
        return;
      }
      $(".rootnode").css({
        opacity: 1
      });
      $("#loading-screen").css({
        opacity: 0
      });
      this.core.state["childPage"].onDOMVisible();
      return setTimeout(function() {
        return $("#loading-screen").css({
          display: "none"
        }, 200);
      });
    }
  };

  return Tile;

})();

window.core = new Core;

window.constants = Constants;

new Tile(Constants);

window.core.exportFunction("ContentViewer.requestInstance", function() {
  return new ContentViewer();
});

window.core.exportFunction("ImageViewer.requestInstance", function() {
  return new ImageViewer();
});

$(function() {
  var attr, c, isMobile, svg, svgs, _i, _len;
  window.nav = new Navigation(".header-nav");
  moment.lang("de");
  if (!window.ie) {
    isMobile = window.matchMedia("only screen and (max-width: 1000px)");
    if (isMobile.matches) {
      window.mobile = true;
    }
  }
  if (window.ie) {
    svgs = document.getElementsByTagName("img");
    for (_i = 0, _len = svgs.length; _i < _len; _i++) {
      svg = svgs[_i];
      attr = svg.getAttribute("src");
      if (attr.indexOf(".svg", attr.length - 4) !== -1) {
        svg.setAttribute("src", attr + ".png");
      }
    }
  }
  audiojs.events.ready(function() {
    return audiojs.createAll();
  });
  c = window.core;
  c.initializeHashNavigation();
  c.insertChildPage(new IndexPage());
  c.initializeTranslationEngine();
  c.handleHash();
  return window.onhashchange = c.handleHash;
});
